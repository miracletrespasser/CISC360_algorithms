'''
Function max_subseq(Sequence A):
    if Sequence A has only one element:
        return [A[0],A[0]]
    Integer last = last element in Sequence A
    SequenceB = SequneceA deleted the last element
    Integer Maximum,Sub_Sum,Pre_Sum
    List=max_subseq(SequenceB)
    Sub_sum=List[0]
    Maximum=List[1]
    If Sub_sum <=0:
        If last > Maximum:
            return [last,last]
        else:
            return [last,Maximum]
    else:
        Pre_Sum=last+sub_sum
        If Pre_Sum>Maximum:
            return [Pre_sum,Presum]
        else:
            return [Pre_sum,Maximum]
//the first element in the returned list is the sum of current subsequence being examined
//the second element in the returned list the largest maximum generated by one subsequence in the list
//Normally to get the expected result, we write in main program that 
//Maximum_wanted=max_subseq(Sequence A)[1]
'''
'''
Q2
Every step in Max_subseq except from the recursive calls have complexity O(1)
The max_subseq reduces size of the parameter from n to 0, meaning that it goes through every
element in the sequence by once thus we write
T(1)=c1;
T(n)=T(n-1)+c2;
thus T(n)=(c2)n+c1;
Thus we have the algorithm as O(n)
'''
def max_subseq(A):
    #Base case:
    #for a single element sequence, return the element and the maximum is equal to the value of this element
    if len(A)==1:
        return [A[0],A[0]]
    last =A[-1]
    #slice the sequence and get rid of the last element
    B = A[0:-1]
    #General case:
    #recursively calls the function until it reaches the base case
    List=max_subseq(B)
    #retrive the sum of the current subsequence we have and the current maximum computed
    Sub_sum=List[0]
    Maximum=List[1]
    if Sub_sum <=0:
        #if the element is greater than the current maximum sum
        if last > Maximum:
            return [last,last]
        else:
            return [last,Maximum]
    else:
        Pre_sum=last+Sub_sum
       #if the new sequence has a larger sum
        if Pre_sum>Maximum:
            return [Pre_sum,Pre_sum]
        else:
            return [Pre_sum,Maximum]#Maximum is the result we want
    #so in the main section, we should write like Max=max_subseq(A)[1]